(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{466:function(e,s,a){"use strict";a.r(s);var t=a(62),n=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"node-基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-基本概念"}},[e._v("#")]),e._v(" Node 基本概念")]),e._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#一-node-是什么"}},[e._v("一.Node 是什么?")])]),a("li",[a("a",{attrs:{href:"#二-node-解决了哪些问题"}},[e._v("二.Node 解决了哪些问题?")])]),a("li",[a("a",{attrs:{href:"#三-js-单线程"}},[e._v("三.JS 单线程")])]),a("li",[a("a",{attrs:{href:"#四-同步异步和阻塞非阻塞"}},[e._v("四.同步异步和阻塞非阻塞")])]),a("li",[a("a",{attrs:{href:"#五-node-中的-event-loop"}},[e._v("五.Node 中的 Event Loop")])]),a("li",[a("a",{attrs:{href:"#六-node-中全局对象"}},[e._v("六.Node 中全局对象")])]),a("li",[a("a",{attrs:{href:"#七-node-中的模块"}},[e._v("七.node 中的模块")])])])]),a("p"),e._v(" "),a("h2",{attrs:{id:"一-node-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-node-是什么"}},[e._v("#")]),e._v(" 一.Node 是什么?")]),e._v(" "),a("p",[e._v("Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境(runtime),Node 不是一门语言是让 js 运行在后端的运行时,并且不包括 javascript 全集,因为在服务端中不包含 DOM 和 BOM,Node 也提供了一些新的模块例如 http,fs 模块等。Node.js 使用了事件驱动、非阻塞式 I/O 的模型，使其轻量又高效并且 Node.js 的包管理器 npm，是全球最大的开源库生态系统。事件驱动与非阻塞 IO 后面我们会一一介绍。到此我们已经对 node 有了简单的概念。")]),e._v(" "),a("h2",{attrs:{id:"二-node-解决了哪些问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-node-解决了哪些问题"}},[e._v("#")]),e._v(" 二.Node 解决了哪些问题?")]),e._v(" "),a("p",[e._v("Node 在处理高并发,"),a("code",[e._v("I/O")]),e._v(" 密集场景有明显的性能优势")]),e._v(" "),a("ul",[a("li",[e._v("高并发,是指在同一时间并发访问服务器")]),e._v(" "),a("li",[e._v("I/O 密集指的是文件操作、网络操作、数据库,相对的有 CPU 密集,CPU 密集指的是逻辑处理运算、压缩、解压、加密、解密")])]),e._v(" "),a("blockquote",[a("p",[e._v("Web 主要场景就是接收客户端的请求读取静态资源和渲染界面,所以 Node 非常适合 Web 应用的开发。")])]),e._v(" "),a("h2",{attrs:{id:"三-js-单线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-js-单线程"}},[e._v("#")]),e._v(" 三.JS 单线程")]),e._v(" "),a("p",[e._v("javascript 在最初设计时设计成了单线程,为什么不是多线程呢？如果多个线程同时操作 DOM 那岂不会很混乱？这里所谓的单线程指的是主线程是单线程的,所以在 Node 中主线程依旧是单线程的。")]),e._v(" "),a("ul",[a("li",[e._v("单线程特点是节约了内存,并且不需要在切换执行上下文")]),e._v(" "),a("li",[e._v("而且单线程不需要管锁的问题.")])]),e._v(" "),a("h2",{attrs:{id:"四-同步异步和阻塞非阻塞"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-同步异步和阻塞非阻塞"}},[e._v("#")]),e._v(" 四.同步异步和阻塞非阻塞")]),e._v(" "),a("h2",{attrs:{id:"五-node-中的-event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-node-中的-event-loop"}},[e._v("#")]),e._v(" 五.Node 中的 Event Loop")]),e._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:e.$withBase("/images/node/nodesystem.png"),alt:"node/nodesystem.png"}})]),e._v(" "),a("ol",[a("li",[e._v("我们写的 js 代码会交给 v8 引擎进行处理")]),e._v(" "),a("li",[e._v("代码中可能会调用 nodeApi,node 会交给 libuv 库处理")]),e._v(" "),a("li",[e._v("libuv 通过阻塞 i/o 和多线程实现了异步 io")]),e._v(" "),a("li",[e._v("通过事件驱动的方式,将结果放到事件队列中,最终交给我们的应用。")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    本阶段执行已经被 setTimeout() 和 setInterval() 的调度回调函数。\n   ┌───────────────────────────┐\n┌─>│           timers          │\n│  └─────────────┬─────────────┘\n|   执行延迟到下一个循环迭代的 I/O 回调。\n│  ┌─────────────┴─────────────┐\n│  │     pending callbacks     │\n│  └─────────────┬─────────────┘\n|   仅系统内部使用。\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘\n|  检索新的I/O事件;执行与 I/O相关的回调  ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │<─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  setImmediate() 回调函数在这里执行。  └───────────────┘\n│  ┌─────────────┴─────────────┐\n│  │           check           │\n│  └─────────────┬─────────────┘\n|  一些关闭的回调函数\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br")])]),a("blockquote",[a("p",[e._v("这里每一个阶段都对应一个事件队列,当 event loop 执行到某个阶段时会将当前阶段对应的队列依次执行。当该队列已用尽或达到回调限制，事件循环将移动到下一阶段")])]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("process.nextTick()")]),e._v(" 从技术上讲不是事件循环的一部分.")])]),e._v(" "),a("h2",{attrs:{id:"六-node-中全局对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六-node-中全局对象"}},[e._v("#")]),e._v(" 六.Node 中全局对象")]),e._v(" "),a("ul",[a("li",[e._v("Buffer")]),e._v(" "),a("li",[e._v("process")]),e._v(" "),a("li",[e._v("setInterval,setTimeout,setImmediate")]),e._v(" "),a("li",[e._v("console")]),e._v(" "),a("li",[e._v("queueMicrotask")])]),e._v(" "),a("h2",{attrs:{id:"七-node-中的模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七-node-中的模块"}},[e._v("#")]),e._v(" 七.node 中的模块")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("__dirname")])]),e._v(" "),a("li",[a("code",[e._v("__filename")])]),e._v(" "),a("li",[e._v("exports")]),e._v(" "),a("li",[e._v("module")]),e._v(" "),a("li",[e._v("require()")])])])}),[],!1,null,null,null);s.default=n.exports}}]);